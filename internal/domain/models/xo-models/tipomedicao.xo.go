package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// TipoMedicao represents a row from 'public.tipo_medicao'.
type TipoMedicao struct {
	ID            int64  `json:"id"`             // id
	Nome          string `json:"nome"`           // nome
	UnidadeMedida string `json:"unidade_medida"` // unidade_medida
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [TipoMedicao] exists in the database.
func (tm *TipoMedicao) Exists() bool {
	return tm._exists
}

// Deleted returns true when the [TipoMedicao] has been marked for deletion
// from the database.
func (tm *TipoMedicao) Deleted() bool {
	return tm._deleted
}

// Insert inserts the [TipoMedicao] to the database.
func (tm *TipoMedicao) Insert(ctx context.Context, db DB) error {
	switch {
	case tm._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case tm._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.tipo_medicao (` +
		`nome, unidade_medida` +
		`) VALUES (` +
		`$1, $2` +
		`) RETURNING id`
	// run
	logf(sqlstr, tm.Nome, tm.UnidadeMedida)
	if err := db.QueryRowContext(ctx, sqlstr, tm.Nome, tm.UnidadeMedida).Scan(&tm.ID); err != nil {
		return logerror(err)
	}
	// set exists
	tm._exists = true
	return nil
}

// Update updates a [TipoMedicao] in the database.
func (tm *TipoMedicao) Update(ctx context.Context, db DB) error {
	switch {
	case !tm._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case tm._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.tipo_medicao SET ` +
		`nome = $1, unidade_medida = $2 ` +
		`WHERE id = $3`
	// run
	logf(sqlstr, tm.Nome, tm.UnidadeMedida, tm.ID)
	if _, err := db.ExecContext(ctx, sqlstr, tm.Nome, tm.UnidadeMedida, tm.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [TipoMedicao] to the database.
func (tm *TipoMedicao) Save(ctx context.Context, db DB) error {
	if tm.Exists() {
		return tm.Update(ctx, db)
	}
	return tm.Insert(ctx, db)
}

// Upsert performs an upsert for [TipoMedicao].
func (tm *TipoMedicao) Upsert(ctx context.Context, db DB) error {
	switch {
	case tm._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.tipo_medicao (` +
		`id, nome, unidade_medida` +
		`) VALUES (` +
		`$1, $2, $3` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`nome = EXCLUDED.nome, unidade_medida = EXCLUDED.unidade_medida `
	// run
	logf(sqlstr, tm.ID, tm.Nome, tm.UnidadeMedida)
	if _, err := db.ExecContext(ctx, sqlstr, tm.ID, tm.Nome, tm.UnidadeMedida); err != nil {
		return logerror(err)
	}
	// set exists
	tm._exists = true
	return nil
}

// Delete deletes the [TipoMedicao] from the database.
func (tm *TipoMedicao) Delete(ctx context.Context, db DB) error {
	switch {
	case !tm._exists: // doesn't exist
		return nil
	case tm._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.tipo_medicao ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, tm.ID)
	if _, err := db.ExecContext(ctx, sqlstr, tm.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	tm._deleted = true
	return nil
}

// TipoMedicaoByID retrieves a row from 'public.tipo_medicao' as a [TipoMedicao].
//
// Generated from index 'tipo_medicao_pk'.
func TipoMedicaoByID(ctx context.Context, db DB, id int64) (*TipoMedicao, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, nome, unidade_medida ` +
		`FROM public.tipo_medicao ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	tm := TipoMedicao{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&tm.ID, &tm.Nome, &tm.UnidadeMedida); err != nil {
		return nil, logerror(err)
	}
	return &tm, nil
}

// TipoMedicaoByNome retrieves a row from 'public.tipo_medicao' as a [TipoMedicao].
//
// Generated from index 'tipo_medicao_unique'.
func TipoMedicaoByNome(ctx context.Context, db DB, nome string) (*TipoMedicao, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, nome, unidade_medida ` +
		`FROM public.tipo_medicao ` +
		`WHERE nome = $1`
	// run
	logf(sqlstr, nome)
	tm := TipoMedicao{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, nome).Scan(&tm.ID, &tm.Nome, &tm.UnidadeMedida); err != nil {
		return nil, logerror(err)
	}
	return &tm, nil
}
