package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// Jardim represents a row from 'public.jardim'.
type Jardim struct {
	ID         int64  `json:"id"`          // id
	Nome       string `json:"nome"`        // nome
	TipoJardim int64  `json:"tipo_jardim"` // tipo_jardim
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Jardim] exists in the database.
func (j *Jardim) Exists() bool {
	return j._exists
}

// Deleted returns true when the [Jardim] has been marked for deletion
// from the database.
func (j *Jardim) Deleted() bool {
	return j._deleted
}

// Insert inserts the [Jardim] to the database.
func (j *Jardim) Insert(ctx context.Context, db DB) error {
	switch {
	case j._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case j._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.jardim (` +
		`nome, tipo_jardim` +
		`) VALUES (` +
		`$1, $2` +
		`) RETURNING id`
	// run
	logf(sqlstr, j.Nome, j.TipoJardim)
	if err := db.QueryRowContext(ctx, sqlstr, j.Nome, j.TipoJardim).Scan(&j.ID); err != nil {
		return logerror(err)
	}
	// set exists
	j._exists = true
	return nil
}

// Update updates a [Jardim] in the database.
func (j *Jardim) Update(ctx context.Context, db DB) error {
	switch {
	case !j._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case j._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.jardim SET ` +
		`nome = $1, tipo_jardim = $2 ` +
		`WHERE id = $3`
	// run
	logf(sqlstr, j.Nome, j.TipoJardim, j.ID)
	if _, err := db.ExecContext(ctx, sqlstr, j.Nome, j.TipoJardim, j.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Jardim] to the database.
func (j *Jardim) Save(ctx context.Context, db DB) error {
	if j.Exists() {
		return j.Update(ctx, db)
	}
	return j.Insert(ctx, db)
}

// Upsert performs an upsert for [Jardim].
func (j *Jardim) Upsert(ctx context.Context, db DB) error {
	switch {
	case j._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.jardim (` +
		`id, nome, tipo_jardim` +
		`) VALUES (` +
		`$1, $2, $3` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`nome = EXCLUDED.nome, tipo_jardim = EXCLUDED.tipo_jardim `
	// run
	logf(sqlstr, j.ID, j.Nome, j.TipoJardim)
	if _, err := db.ExecContext(ctx, sqlstr, j.ID, j.Nome, j.TipoJardim); err != nil {
		return logerror(err)
	}
	// set exists
	j._exists = true
	return nil
}

// Delete deletes the [Jardim] from the database.
func (j *Jardim) Delete(ctx context.Context, db DB) error {
	switch {
	case !j._exists: // doesn't exist
		return nil
	case j._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.jardim ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, j.ID)
	if _, err := db.ExecContext(ctx, sqlstr, j.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	j._deleted = true
	return nil
}

// JardimByID retrieves a row from 'public.jardim' as a [Jardim].
//
// Generated from index 'jardim_pk'.
func JardimByID(ctx context.Context, db DB, id int64) (*Jardim, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, nome, tipo_jardim ` +
		`FROM public.jardim ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	j := Jardim{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&j.ID, &j.Nome, &j.TipoJardim); err != nil {
		return nil, logerror(err)
	}
	return &j, nil
}

// JardimByNome retrieves a row from 'public.jardim' as a [Jardim].
//
// Generated from index 'jardim_unique'.
func JardimByNome(ctx context.Context, db DB, nome string) (*Jardim, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, nome, tipo_jardim ` +
		`FROM public.jardim ` +
		`WHERE nome = $1`
	// run
	logf(sqlstr, nome)
	j := Jardim{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, nome).Scan(&j.ID, &j.Nome, &j.TipoJardim); err != nil {
		return nil, logerror(err)
	}
	return &j, nil
}

// TipoJardim returns the TipoJardim associated with the [Jardim]'s (TipoJardim).
//
// Generated from foreign key 'jardim_tipo_jardim_fk'.
func (j *Jardim) TiposJardim(ctx context.Context, db DB) (*TipoJardim, error) {
	return TipoJardimByID(ctx, db, j.TipoJardim)
}
