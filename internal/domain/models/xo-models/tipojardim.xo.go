package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// TipoJardim represents a row from 'public.tipo_jardim'.
type TipoJardim struct {
	ID       int64  `json:"id"`       // id
	Ambiente string `json:"ambiente"` // ambiente
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [TipoJardim] exists in the database.
func (tj *TipoJardim) Exists() bool {
	return tj._exists
}

// Deleted returns true when the [TipoJardim] has been marked for deletion
// from the database.
func (tj *TipoJardim) Deleted() bool {
	return tj._deleted
}

// Insert inserts the [TipoJardim] to the database.
func (tj *TipoJardim) Insert(ctx context.Context, db DB) error {
	switch {
	case tj._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case tj._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.tipo_jardim (` +
		`ambiente` +
		`) VALUES (` +
		`$1` +
		`) RETURNING id`
	// run
	logf(sqlstr, tj.Ambiente)
	if err := db.QueryRowContext(ctx, sqlstr, tj.Ambiente).Scan(&tj.ID); err != nil {
		return logerror(err)
	}
	// set exists
	tj._exists = true
	return nil
}

// Update updates a [TipoJardim] in the database.
func (tj *TipoJardim) Update(ctx context.Context, db DB) error {
	switch {
	case !tj._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case tj._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.tipo_jardim SET ` +
		`ambiente = $1 ` +
		`WHERE id = $2`
	// run
	logf(sqlstr, tj.Ambiente, tj.ID)
	if _, err := db.ExecContext(ctx, sqlstr, tj.Ambiente, tj.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [TipoJardim] to the database.
func (tj *TipoJardim) Save(ctx context.Context, db DB) error {
	if tj.Exists() {
		return tj.Update(ctx, db)
	}
	return tj.Insert(ctx, db)
}

// Upsert performs an upsert for [TipoJardim].
func (tj *TipoJardim) Upsert(ctx context.Context, db DB) error {
	switch {
	case tj._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.tipo_jardim (` +
		`id, ambiente` +
		`) VALUES (` +
		`$1, $2` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`ambiente = EXCLUDED.ambiente `
	// run
	logf(sqlstr, tj.ID, tj.Ambiente)
	if _, err := db.ExecContext(ctx, sqlstr, tj.ID, tj.Ambiente); err != nil {
		return logerror(err)
	}
	// set exists
	tj._exists = true
	return nil
}

// Delete deletes the [TipoJardim] from the database.
func (tj *TipoJardim) Delete(ctx context.Context, db DB) error {
	switch {
	case !tj._exists: // doesn't exist
		return nil
	case tj._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.tipo_jardim ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, tj.ID)
	if _, err := db.ExecContext(ctx, sqlstr, tj.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	tj._deleted = true
	return nil
}

// TipoJardimByID retrieves a row from 'public.tipo_jardim' as a [TipoJardim].
//
// Generated from index 'tipo_jardim_pk'.
func TipoJardimByID(ctx context.Context, db DB, id int64) (*TipoJardim, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, ambiente ` +
		`FROM public.tipo_jardim ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	tj := TipoJardim{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&tj.ID, &tj.Ambiente); err != nil {
		return nil, logerror(err)
	}
	return &tj, nil
}

// TipoJardimByAmbiente retrieves a row from 'public.tipo_jardim' as a [TipoJardim].
//
// Generated from index 'tipo_jardim_unique'.
func TipoJardimByAmbiente(ctx context.Context, db DB, ambiente string) (*TipoJardim, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, ambiente ` +
		`FROM public.tipo_jardim ` +
		`WHERE ambiente = $1`
	// run
	logf(sqlstr, ambiente)
	tj := TipoJardim{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, ambiente).Scan(&tj.ID, &tj.Ambiente); err != nil {
		return nil, logerror(err)
	}
	return &tj, nil
}
