package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// TipoTarefa represents a row from 'public.tipo_tarefa'.
type TipoTarefa struct {
	ID   int64  `json:"id"`   // id
	Nome string `json:"nome"` // nome
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [TipoTarefa] exists in the database.
func (tt *TipoTarefa) Exists() bool {
	return tt._exists
}

// Deleted returns true when the [TipoTarefa] has been marked for deletion
// from the database.
func (tt *TipoTarefa) Deleted() bool {
	return tt._deleted
}

// Insert inserts the [TipoTarefa] to the database.
func (tt *TipoTarefa) Insert(ctx context.Context, db DB) error {
	switch {
	case tt._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case tt._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.tipo_tarefa (` +
		`nome` +
		`) VALUES (` +
		`$1` +
		`) RETURNING id`
	// run
	logf(sqlstr, tt.Nome)
	if err := db.QueryRowContext(ctx, sqlstr, tt.Nome).Scan(&tt.ID); err != nil {
		return logerror(err)
	}
	// set exists
	tt._exists = true
	return nil
}

// Update updates a [TipoTarefa] in the database.
func (tt *TipoTarefa) Update(ctx context.Context, db DB) error {
	switch {
	case !tt._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case tt._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.tipo_tarefa SET ` +
		`nome = $1 ` +
		`WHERE id = $2`
	// run
	logf(sqlstr, tt.Nome, tt.ID)
	if _, err := db.ExecContext(ctx, sqlstr, tt.Nome, tt.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [TipoTarefa] to the database.
func (tt *TipoTarefa) Save(ctx context.Context, db DB) error {
	if tt.Exists() {
		return tt.Update(ctx, db)
	}
	return tt.Insert(ctx, db)
}

// Upsert performs an upsert for [TipoTarefa].
func (tt *TipoTarefa) Upsert(ctx context.Context, db DB) error {
	switch {
	case tt._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.tipo_tarefa (` +
		`id, nome` +
		`) VALUES (` +
		`$1, $2` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`nome = EXCLUDED.nome `
	// run
	logf(sqlstr, tt.ID, tt.Nome)
	if _, err := db.ExecContext(ctx, sqlstr, tt.ID, tt.Nome); err != nil {
		return logerror(err)
	}
	// set exists
	tt._exists = true
	return nil
}

// Delete deletes the [TipoTarefa] from the database.
func (tt *TipoTarefa) Delete(ctx context.Context, db DB) error {
	switch {
	case !tt._exists: // doesn't exist
		return nil
	case tt._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.tipo_tarefa ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, tt.ID)
	if _, err := db.ExecContext(ctx, sqlstr, tt.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	tt._deleted = true
	return nil
}

// TipoTarefaByID retrieves a row from 'public.tipo_tarefa' as a [TipoTarefa].
//
// Generated from index 'tipo_tarefa_pk'.
func TipoTarefaByID(ctx context.Context, db DB, id int64) (*TipoTarefa, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, nome ` +
		`FROM public.tipo_tarefa ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	tt := TipoTarefa{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&tt.ID, &tt.Nome); err != nil {
		return nil, logerror(err)
	}
	return &tt, nil
}

// TipoTarefaByNome retrieves a row from 'public.tipo_tarefa' as a [TipoTarefa].
//
// Generated from index 'tipo_tarefa_unique'.
func TipoTarefaByNome(ctx context.Context, db DB, nome string) (*TipoTarefa, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, nome ` +
		`FROM public.tipo_tarefa ` +
		`WHERE nome = $1`
	// run
	logf(sqlstr, nome)
	tt := TipoTarefa{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, nome).Scan(&tt.ID, &tt.Nome); err != nil {
		return nil, logerror(err)
	}
	return &tt, nil
}
