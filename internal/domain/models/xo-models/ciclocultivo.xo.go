package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"
)

// CicloCultivo represents a row from 'public.ciclo_cultivo'.
type CicloCultivo struct {
	ID               int64     `json:"id"`                // id
	DataInicio       time.Time `json:"data_inicio"`       // data_inicio
	Fase             string    `json:"fase"`              // fase
	CicloCrescimento string    `json:"ciclo_crescimento"` // ciclo_crescimento
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [CicloCultivo] exists in the database.
func (cc *CicloCultivo) Exists() bool {
	return cc._exists
}

// Deleted returns true when the [CicloCultivo] has been marked for deletion
// from the database.
func (cc *CicloCultivo) Deleted() bool {
	return cc._deleted
}

// Insert inserts the [CicloCultivo] to the database.
func (cc *CicloCultivo) Insert(ctx context.Context, db DB) error {
	switch {
	case cc._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case cc._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.ciclo_cultivo (` +
		`data_inicio, fase, ciclo_crescimento` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) RETURNING id`
	// run
	logf(sqlstr, cc.DataInicio, cc.Fase, cc.CicloCrescimento)
	if err := db.QueryRowContext(ctx, sqlstr, cc.DataInicio, cc.Fase, cc.CicloCrescimento).Scan(&cc.ID); err != nil {
		return logerror(err)
	}
	// set exists
	cc._exists = true
	return nil
}

// Update updates a [CicloCultivo] in the database.
func (cc *CicloCultivo) Update(ctx context.Context, db DB) error {
	switch {
	case !cc._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case cc._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.ciclo_cultivo SET ` +
		`data_inicio = $1, fase = $2, ciclo_crescimento = $3 ` +
		`WHERE id = $4`
	// run
	logf(sqlstr, cc.DataInicio, cc.Fase, cc.CicloCrescimento, cc.ID)
	if _, err := db.ExecContext(ctx, sqlstr, cc.DataInicio, cc.Fase, cc.CicloCrescimento, cc.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [CicloCultivo] to the database.
func (cc *CicloCultivo) Save(ctx context.Context, db DB) error {
	if cc.Exists() {
		return cc.Update(ctx, db)
	}
	return cc.Insert(ctx, db)
}

// Upsert performs an upsert for [CicloCultivo].
func (cc *CicloCultivo) Upsert(ctx context.Context, db DB) error {
	switch {
	case cc._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.ciclo_cultivo (` +
		`id, data_inicio, fase, ciclo_crescimento` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`data_inicio = EXCLUDED.data_inicio, fase = EXCLUDED.fase, ciclo_crescimento = EXCLUDED.ciclo_crescimento `
	// run
	logf(sqlstr, cc.ID, cc.DataInicio, cc.Fase, cc.CicloCrescimento)
	if _, err := db.ExecContext(ctx, sqlstr, cc.ID, cc.DataInicio, cc.Fase, cc.CicloCrescimento); err != nil {
		return logerror(err)
	}
	// set exists
	cc._exists = true
	return nil
}

// Delete deletes the [CicloCultivo] from the database.
func (cc *CicloCultivo) Delete(ctx context.Context, db DB) error {
	switch {
	case !cc._exists: // doesn't exist
		return nil
	case cc._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.ciclo_cultivo ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, cc.ID)
	if _, err := db.ExecContext(ctx, sqlstr, cc.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	cc._deleted = true
	return nil
}

// CicloCultivoByID retrieves a row from 'public.ciclo_cultivo' as a [CicloCultivo].
//
// Generated from index 'ciclo_cultivo_pk'.
func CicloCultivoByID(ctx context.Context, db DB, id int64) (*CicloCultivo, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, data_inicio, fase, ciclo_crescimento ` +
		`FROM public.ciclo_cultivo ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	cc := CicloCultivo{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&cc.ID, &cc.DataInicio, &cc.Fase, &cc.CicloCrescimento); err != nil {
		return nil, logerror(err)
	}
	return &cc, nil
}
