package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"time"
)

// RegistroAmbiente represents a row from 'public.registro_ambiente'.
type RegistroAmbiente struct {
	ID         int64          `json:"id"`         // id
	Ambiente   int64          `json:"ambiente"`   // ambiente
	Data       time.Time      `json:"data"`       // data
	Observacao sql.NullString `json:"observacao"` // observacao
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [RegistroAmbiente] exists in the database.
func (ra *RegistroAmbiente) Exists() bool {
	return ra._exists
}

// Deleted returns true when the [RegistroAmbiente] has been marked for deletion
// from the database.
func (ra *RegistroAmbiente) Deleted() bool {
	return ra._deleted
}

// Insert inserts the [RegistroAmbiente] to the database.
func (ra *RegistroAmbiente) Insert(ctx context.Context, db DB) error {
	switch {
	case ra._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case ra._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.registro_ambiente (` +
		`ambiente, data, observacao` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) RETURNING id`
	// run
	logf(sqlstr, ra.Ambiente, ra.Data, ra.Observacao)
	if err := db.QueryRowContext(ctx, sqlstr, ra.Ambiente, ra.Data, ra.Observacao).Scan(&ra.ID); err != nil {
		return logerror(err)
	}
	// set exists
	ra._exists = true
	return nil
}

// Update updates a [RegistroAmbiente] in the database.
func (ra *RegistroAmbiente) Update(ctx context.Context, db DB) error {
	switch {
	case !ra._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case ra._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.registro_ambiente SET ` +
		`ambiente = $1, data = $2, observacao = $3 ` +
		`WHERE id = $4`
	// run
	logf(sqlstr, ra.Ambiente, ra.Data, ra.Observacao, ra.ID)
	if _, err := db.ExecContext(ctx, sqlstr, ra.Ambiente, ra.Data, ra.Observacao, ra.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [RegistroAmbiente] to the database.
func (ra *RegistroAmbiente) Save(ctx context.Context, db DB) error {
	if ra.Exists() {
		return ra.Update(ctx, db)
	}
	return ra.Insert(ctx, db)
}

// Upsert performs an upsert for [RegistroAmbiente].
func (ra *RegistroAmbiente) Upsert(ctx context.Context, db DB) error {
	switch {
	case ra._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.registro_ambiente (` +
		`id, ambiente, data, observacao` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`ambiente = EXCLUDED.ambiente, data = EXCLUDED.data, observacao = EXCLUDED.observacao `
	// run
	logf(sqlstr, ra.ID, ra.Ambiente, ra.Data, ra.Observacao)
	if _, err := db.ExecContext(ctx, sqlstr, ra.ID, ra.Ambiente, ra.Data, ra.Observacao); err != nil {
		return logerror(err)
	}
	// set exists
	ra._exists = true
	return nil
}

// Delete deletes the [RegistroAmbiente] from the database.
func (ra *RegistroAmbiente) Delete(ctx context.Context, db DB) error {
	switch {
	case !ra._exists: // doesn't exist
		return nil
	case ra._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.registro_ambiente ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, ra.ID)
	if _, err := db.ExecContext(ctx, sqlstr, ra.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	ra._deleted = true
	return nil
}

// RegistroAmbienteByID retrieves a row from 'public.registro_ambiente' as a [RegistroAmbiente].
//
// Generated from index 'registro_ambiente_pk'.
func RegistroAmbienteByID(ctx context.Context, db DB, id int64) (*RegistroAmbiente, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, ambiente, data, observacao ` +
		`FROM public.registro_ambiente ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	ra := RegistroAmbiente{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&ra.ID, &ra.Ambiente, &ra.Data, &ra.Observacao); err != nil {
		return nil, logerror(err)
	}
	return &ra, nil
}

// Ambiente returns the Ambiente associated with the [RegistroAmbiente]'s (Ambiente).
//
// Generated from foreign key 'registro_ambiente_ambiente_fk'.
func (ra *RegistroAmbiente) Ambientes(ctx context.Context, db DB) (*Ambiente, error) {
	return AmbienteByID(ctx, db, ra.Ambiente)
}
