package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// MeioCultivo represents a row from 'public.meio_cultivo'.
type MeioCultivo struct {
	ID        int64          `json:"id"`        // id
	Nome      string         `json:"nome"`      // nome
	Descricao sql.NullString `json:"descricao"` // descricao
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [MeioCultivo] exists in the database.
func (mc *MeioCultivo) Exists() bool {
	return mc._exists
}

// Deleted returns true when the [MeioCultivo] has been marked for deletion
// from the database.
func (mc *MeioCultivo) Deleted() bool {
	return mc._deleted
}

// Insert inserts the [MeioCultivo] to the database.
func (mc *MeioCultivo) Insert(ctx context.Context, db DB) error {
	switch {
	case mc._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case mc._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.meio_cultivo (` +
		`nome, descricao` +
		`) VALUES (` +
		`$1, $2` +
		`) RETURNING id`
	// run
	logf(sqlstr, mc.Nome, mc.Descricao)
	if err := db.QueryRowContext(ctx, sqlstr, mc.Nome, mc.Descricao).Scan(&mc.ID); err != nil {
		return logerror(err)
	}
	// set exists
	mc._exists = true
	return nil
}

// Update updates a [MeioCultivo] in the database.
func (mc *MeioCultivo) Update(ctx context.Context, db DB) error {
	switch {
	case !mc._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case mc._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.meio_cultivo SET ` +
		`nome = $1, descricao = $2 ` +
		`WHERE id = $3`
	// run
	logf(sqlstr, mc.Nome, mc.Descricao, mc.ID)
	if _, err := db.ExecContext(ctx, sqlstr, mc.Nome, mc.Descricao, mc.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [MeioCultivo] to the database.
func (mc *MeioCultivo) Save(ctx context.Context, db DB) error {
	if mc.Exists() {
		return mc.Update(ctx, db)
	}
	return mc.Insert(ctx, db)
}

// Upsert performs an upsert for [MeioCultivo].
func (mc *MeioCultivo) Upsert(ctx context.Context, db DB) error {
	switch {
	case mc._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.meio_cultivo (` +
		`id, nome, descricao` +
		`) VALUES (` +
		`$1, $2, $3` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`nome = EXCLUDED.nome, descricao = EXCLUDED.descricao `
	// run
	logf(sqlstr, mc.ID, mc.Nome, mc.Descricao)
	if _, err := db.ExecContext(ctx, sqlstr, mc.ID, mc.Nome, mc.Descricao); err != nil {
		return logerror(err)
	}
	// set exists
	mc._exists = true
	return nil
}

// Delete deletes the [MeioCultivo] from the database.
func (mc *MeioCultivo) Delete(ctx context.Context, db DB) error {
	switch {
	case !mc._exists: // doesn't exist
		return nil
	case mc._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.meio_cultivo ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, mc.ID)
	if _, err := db.ExecContext(ctx, sqlstr, mc.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	mc._deleted = true
	return nil
}

// MeioCultivoByID retrieves a row from 'public.meio_cultivo' as a [MeioCultivo].
//
// Generated from index 'meio_cultivo_pk'.
func MeioCultivoByID(ctx context.Context, db DB, id int64) (*MeioCultivo, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, nome, descricao ` +
		`FROM public.meio_cultivo ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	mc := MeioCultivo{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&mc.ID, &mc.Nome, &mc.Descricao); err != nil {
		return nil, logerror(err)
	}
	return &mc, nil
}

// MeioCultivoByNome retrieves a row from 'public.meio_cultivo' as a [MeioCultivo].
//
// Generated from index 'meio_cultivo_unique'.
func MeioCultivoByNome(ctx context.Context, db DB, nome string) (*MeioCultivo, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, nome, descricao ` +
		`FROM public.meio_cultivo ` +
		`WHERE nome = $1`
	// run
	logf(sqlstr, nome)
	mc := MeioCultivo{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, nome).Scan(&mc.ID, &mc.Nome, &mc.Descricao); err != nil {
		return nil, logerror(err)
	}
	return &mc, nil
}
