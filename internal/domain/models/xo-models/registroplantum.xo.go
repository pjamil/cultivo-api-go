package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"time"
)

// RegistroPlantum represents a row from 'public.registro_planta'.
type RegistroPlantum struct {
	ID        int64          `json:"id"`        // id
	Planta    int64          `json:"planta"`    // planta
	Data      time.Time      `json:"data"`      // data
	Descricao sql.NullString `json:"descricao"` // descricao
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [RegistroPlantum] exists in the database.
func (rp *RegistroPlantum) Exists() bool {
	return rp._exists
}

// Deleted returns true when the [RegistroPlantum] has been marked for deletion
// from the database.
func (rp *RegistroPlantum) Deleted() bool {
	return rp._deleted
}

// Insert inserts the [RegistroPlantum] to the database.
func (rp *RegistroPlantum) Insert(ctx context.Context, db DB) error {
	switch {
	case rp._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case rp._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO public.registro_planta (` +
		`id, planta, data, descricao` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)`
	// run
	logf(sqlstr, rp.ID, rp.Planta, rp.Data, rp.Descricao)
	if _, err := db.ExecContext(ctx, sqlstr, rp.ID, rp.Planta, rp.Data, rp.Descricao); err != nil {
		return logerror(err)
	}
	// set exists
	rp._exists = true
	return nil
}

// Update updates a [RegistroPlantum] in the database.
func (rp *RegistroPlantum) Update(ctx context.Context, db DB) error {
	switch {
	case !rp._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case rp._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.registro_planta SET ` +
		`planta = $1, data = $2, descricao = $3 ` +
		`WHERE id = $4`
	// run
	logf(sqlstr, rp.Planta, rp.Data, rp.Descricao, rp.ID)
	if _, err := db.ExecContext(ctx, sqlstr, rp.Planta, rp.Data, rp.Descricao, rp.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [RegistroPlantum] to the database.
func (rp *RegistroPlantum) Save(ctx context.Context, db DB) error {
	if rp.Exists() {
		return rp.Update(ctx, db)
	}
	return rp.Insert(ctx, db)
}

// Upsert performs an upsert for [RegistroPlantum].
func (rp *RegistroPlantum) Upsert(ctx context.Context, db DB) error {
	switch {
	case rp._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.registro_planta (` +
		`id, planta, data, descricao` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`planta = EXCLUDED.planta, data = EXCLUDED.data, descricao = EXCLUDED.descricao `
	// run
	logf(sqlstr, rp.ID, rp.Planta, rp.Data, rp.Descricao)
	if _, err := db.ExecContext(ctx, sqlstr, rp.ID, rp.Planta, rp.Data, rp.Descricao); err != nil {
		return logerror(err)
	}
	// set exists
	rp._exists = true
	return nil
}

// Delete deletes the [RegistroPlantum] from the database.
func (rp *RegistroPlantum) Delete(ctx context.Context, db DB) error {
	switch {
	case !rp._exists: // doesn't exist
		return nil
	case rp._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.registro_planta ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, rp.ID)
	if _, err := db.ExecContext(ctx, sqlstr, rp.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	rp._deleted = true
	return nil
}

// RegistroPlantumByID retrieves a row from 'public.registro_planta' as a [RegistroPlantum].
//
// Generated from index 'registro_planta_pk'.
func RegistroPlantumByID(ctx context.Context, db DB, id int64) (*RegistroPlantum, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, planta, data, descricao ` +
		`FROM public.registro_planta ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	rp := RegistroPlantum{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&rp.ID, &rp.Planta, &rp.Data, &rp.Descricao); err != nil {
		return nil, logerror(err)
	}
	return &rp, nil
}

// Plantum returns the Plantum associated with the [RegistroPlantum]'s (Planta).
//
// Generated from foreign key 'registro_planta_planta_fk'.
func (rp *RegistroPlantum) Plantum(ctx context.Context, db DB) (*Plantum, error) {
	return PlantumByID(ctx, db, rp.Planta)
}
