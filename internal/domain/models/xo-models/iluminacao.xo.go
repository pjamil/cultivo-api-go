package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// Iluminacao represents a row from 'public.iluminacao'.
type Iluminacao struct {
	ID             int64          `json:"id"`              // id
	TipoIluminacao string         `json:"tipo_iluminacao"` // tipo_iluminacao
	Potencia       sql.NullString `json:"potencia"`        // potencia
	TemperaturaCor sql.NullString `json:"temperatura_cor"` // temperatura_cor
	AmbienteID     sql.NullInt64  `json:"ambiente_id"`     // ambiente_id
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Iluminacao] exists in the database.
func (i *Iluminacao) Exists() bool {
	return i._exists
}

// Deleted returns true when the [Iluminacao] has been marked for deletion
// from the database.
func (i *Iluminacao) Deleted() bool {
	return i._deleted
}

// Insert inserts the [Iluminacao] to the database.
func (i *Iluminacao) Insert(ctx context.Context, db DB) error {
	switch {
	case i._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case i._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.iluminacao (` +
		`tipo_iluminacao, potencia, temperatura_cor, ambiente_id` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) RETURNING id`
	// run
	logf(sqlstr, i.TipoIluminacao, i.Potencia, i.TemperaturaCor, i.AmbienteID)
	if err := db.QueryRowContext(ctx, sqlstr, i.TipoIluminacao, i.Potencia, i.TemperaturaCor, i.AmbienteID).Scan(&i.ID); err != nil {
		return logerror(err)
	}
	// set exists
	i._exists = true
	return nil
}

// Update updates a [Iluminacao] in the database.
func (i *Iluminacao) Update(ctx context.Context, db DB) error {
	switch {
	case !i._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case i._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.iluminacao SET ` +
		`tipo_iluminacao = $1, potencia = $2, temperatura_cor = $3, ambiente_id = $4 ` +
		`WHERE id = $5`
	// run
	logf(sqlstr, i.TipoIluminacao, i.Potencia, i.TemperaturaCor, i.AmbienteID, i.ID)
	if _, err := db.ExecContext(ctx, sqlstr, i.TipoIluminacao, i.Potencia, i.TemperaturaCor, i.AmbienteID, i.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Iluminacao] to the database.
func (i *Iluminacao) Save(ctx context.Context, db DB) error {
	if i.Exists() {
		return i.Update(ctx, db)
	}
	return i.Insert(ctx, db)
}

// Upsert performs an upsert for [Iluminacao].
func (i *Iluminacao) Upsert(ctx context.Context, db DB) error {
	switch {
	case i._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.iluminacao (` +
		`id, tipo_iluminacao, potencia, temperatura_cor, ambiente_id` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`tipo_iluminacao = EXCLUDED.tipo_iluminacao, potencia = EXCLUDED.potencia, temperatura_cor = EXCLUDED.temperatura_cor, ambiente_id = EXCLUDED.ambiente_id `
	// run
	logf(sqlstr, i.ID, i.TipoIluminacao, i.Potencia, i.TemperaturaCor, i.AmbienteID)
	if _, err := db.ExecContext(ctx, sqlstr, i.ID, i.TipoIluminacao, i.Potencia, i.TemperaturaCor, i.AmbienteID); err != nil {
		return logerror(err)
	}
	// set exists
	i._exists = true
	return nil
}

// Delete deletes the [Iluminacao] from the database.
func (i *Iluminacao) Delete(ctx context.Context, db DB) error {
	switch {
	case !i._exists: // doesn't exist
		return nil
	case i._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.iluminacao ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, i.ID)
	if _, err := db.ExecContext(ctx, sqlstr, i.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	i._deleted = true
	return nil
}

// IluminacaoByID retrieves a row from 'public.iluminacao' as a [Iluminacao].
//
// Generated from index 'iluminacao_pk'.
func IluminacaoByID(ctx context.Context, db DB, id int64) (*Iluminacao, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, tipo_iluminacao, potencia, temperatura_cor, ambiente_id ` +
		`FROM public.iluminacao ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	i := Iluminacao{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&i.ID, &i.TipoIluminacao, &i.Potencia, &i.TemperaturaCor, &i.AmbienteID); err != nil {
		return nil, logerror(err)
	}
	return &i, nil
}

// Ambiente returns the Ambiente associated with the [Iluminacao]'s (AmbienteID).
//
// Generated from foreign key 'iluminacao_ambiente_fk'.
func (i *Iluminacao) Ambiente(ctx context.Context, db DB) (*Ambiente, error) {
	return AmbienteByID(ctx, db, i.AmbienteID.Int64)
}
