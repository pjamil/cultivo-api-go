package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// Medicao represents a row from 'public.medicao'.
type Medicao struct {
	ID               int64         `json:"id"`                // id
	TipoMedicao      int64         `json:"tipo_medicao"`      // tipo_medicao
	Valor            float64       `json:"valor"`             // valor
	RegistroPlanta   sql.NullInt64 `json:"registro_planta"`   // registro_planta
	RegistroAmbiente sql.NullInt64 `json:"registro_ambiente"` // registro_ambiente
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Medicao] exists in the database.
func (m *Medicao) Exists() bool {
	return m._exists
}

// Deleted returns true when the [Medicao] has been marked for deletion
// from the database.
func (m *Medicao) Deleted() bool {
	return m._deleted
}

// Insert inserts the [Medicao] to the database.
func (m *Medicao) Insert(ctx context.Context, db DB) error {
	switch {
	case m._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case m._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.medicao (` +
		`tipo_medicao, valor, registro_planta, registro_ambiente` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) RETURNING id`
	// run
	logf(sqlstr, m.TipoMedicao, m.Valor, m.RegistroPlanta, m.RegistroAmbiente)
	if err := db.QueryRowContext(ctx, sqlstr, m.TipoMedicao, m.Valor, m.RegistroPlanta, m.RegistroAmbiente).Scan(&m.ID); err != nil {
		return logerror(err)
	}
	// set exists
	m._exists = true
	return nil
}

// Update updates a [Medicao] in the database.
func (m *Medicao) Update(ctx context.Context, db DB) error {
	switch {
	case !m._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case m._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.medicao SET ` +
		`tipo_medicao = $1, valor = $2, registro_planta = $3, registro_ambiente = $4 ` +
		`WHERE id = $5`
	// run
	logf(sqlstr, m.TipoMedicao, m.Valor, m.RegistroPlanta, m.RegistroAmbiente, m.ID)
	if _, err := db.ExecContext(ctx, sqlstr, m.TipoMedicao, m.Valor, m.RegistroPlanta, m.RegistroAmbiente, m.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Medicao] to the database.
func (m *Medicao) Save(ctx context.Context, db DB) error {
	if m.Exists() {
		return m.Update(ctx, db)
	}
	return m.Insert(ctx, db)
}

// Upsert performs an upsert for [Medicao].
func (m *Medicao) Upsert(ctx context.Context, db DB) error {
	switch {
	case m._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.medicao (` +
		`id, tipo_medicao, valor, registro_planta, registro_ambiente` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`tipo_medicao = EXCLUDED.tipo_medicao, valor = EXCLUDED.valor, registro_planta = EXCLUDED.registro_planta, registro_ambiente = EXCLUDED.registro_ambiente `
	// run
	logf(sqlstr, m.ID, m.TipoMedicao, m.Valor, m.RegistroPlanta, m.RegistroAmbiente)
	if _, err := db.ExecContext(ctx, sqlstr, m.ID, m.TipoMedicao, m.Valor, m.RegistroPlanta, m.RegistroAmbiente); err != nil {
		return logerror(err)
	}
	// set exists
	m._exists = true
	return nil
}

// Delete deletes the [Medicao] from the database.
func (m *Medicao) Delete(ctx context.Context, db DB) error {
	switch {
	case !m._exists: // doesn't exist
		return nil
	case m._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.medicao ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, m.ID)
	if _, err := db.ExecContext(ctx, sqlstr, m.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	m._deleted = true
	return nil
}

// MedicaoByID retrieves a row from 'public.medicao' as a [Medicao].
//
// Generated from index 'medicao_pk'.
func MedicaoByID(ctx context.Context, db DB, id int64) (*Medicao, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, tipo_medicao, valor, registro_planta, registro_ambiente ` +
		`FROM public.medicao ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	m := Medicao{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&m.ID, &m.TipoMedicao, &m.Valor, &m.RegistroPlanta, &m.RegistroAmbiente); err != nil {
		return nil, logerror(err)
	}
	return &m, nil
}

// RegistroAmbiente returns the RegistroAmbiente associated with the [Medicao]'s (RegistroAmbiente).
//
// Generated from foreign key 'medicao_registro_ambiente_fk'.
func (m *Medicao) RegistrosAmbiente(ctx context.Context, db DB) (*RegistroAmbiente, error) {
	return RegistroAmbienteByID(ctx, db, m.RegistroAmbiente.Int64)
}

// RegistroPlantum returns the RegistroPlantum associated with the [Medicao]'s (RegistroPlanta).
//
// Generated from foreign key 'medicao_registro_planta_fk'.
func (m *Medicao) RegistroPlantum(ctx context.Context, db DB) (*RegistroPlantum, error) {
	return RegistroPlantumByID(ctx, db, m.RegistroPlanta.Int64)
}

// TipoMedicao returns the TipoMedicao associated with the [Medicao]'s (TipoMedicao).
//
// Generated from foreign key 'medicao_tipo_medicao_fk'.
func (m *Medicao) TiposMedicao(ctx context.Context, db DB) (*TipoMedicao, error) {
	return TipoMedicaoByID(ctx, db, m.TipoMedicao)
}
