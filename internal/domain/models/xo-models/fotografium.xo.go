package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"time"
)

// Fotografium represents a row from 'public.fotografia'.
type Fotografium struct {
	ID         int64         `json:"id"`          // id
	PlantaID   int64         `json:"planta_id"`   // planta_id
	Data       time.Time     `json:"data"`        // data
	Nome       string        `json:"nome"`        // nome
	File       int64         `json:"file"`        // file
	AmbienteID sql.NullInt64 `json:"ambiente_id"` // ambiente_id
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Fotografium] exists in the database.
func (f *Fotografium) Exists() bool {
	return f._exists
}

// Deleted returns true when the [Fotografium] has been marked for deletion
// from the database.
func (f *Fotografium) Deleted() bool {
	return f._deleted
}

// Insert inserts the [Fotografium] to the database.
func (f *Fotografium) Insert(ctx context.Context, db DB) error {
	switch {
	case f._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case f._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.fotografia (` +
		`planta_id, data, nome, file, ambiente_id` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) RETURNING id`
	// run
	logf(sqlstr, f.PlantaID, f.Data, f.Nome, f.File, f.AmbienteID)
	if err := db.QueryRowContext(ctx, sqlstr, f.PlantaID, f.Data, f.Nome, f.File, f.AmbienteID).Scan(&f.ID); err != nil {
		return logerror(err)
	}
	// set exists
	f._exists = true
	return nil
}

// Update updates a [Fotografium] in the database.
func (f *Fotografium) Update(ctx context.Context, db DB) error {
	switch {
	case !f._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case f._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.fotografia SET ` +
		`planta_id = $1, data = $2, nome = $3, file = $4, ambiente_id = $5 ` +
		`WHERE id = $6`
	// run
	logf(sqlstr, f.PlantaID, f.Data, f.Nome, f.File, f.AmbienteID, f.ID)
	if _, err := db.ExecContext(ctx, sqlstr, f.PlantaID, f.Data, f.Nome, f.File, f.AmbienteID, f.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Fotografium] to the database.
func (f *Fotografium) Save(ctx context.Context, db DB) error {
	if f.Exists() {
		return f.Update(ctx, db)
	}
	return f.Insert(ctx, db)
}

// Upsert performs an upsert for [Fotografium].
func (f *Fotografium) Upsert(ctx context.Context, db DB) error {
	switch {
	case f._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.fotografia (` +
		`id, planta_id, data, nome, file, ambiente_id` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`planta_id = EXCLUDED.planta_id, data = EXCLUDED.data, nome = EXCLUDED.nome, file = EXCLUDED.file, ambiente_id = EXCLUDED.ambiente_id `
	// run
	logf(sqlstr, f.ID, f.PlantaID, f.Data, f.Nome, f.File, f.AmbienteID)
	if _, err := db.ExecContext(ctx, sqlstr, f.ID, f.PlantaID, f.Data, f.Nome, f.File, f.AmbienteID); err != nil {
		return logerror(err)
	}
	// set exists
	f._exists = true
	return nil
}

// Delete deletes the [Fotografium] from the database.
func (f *Fotografium) Delete(ctx context.Context, db DB) error {
	switch {
	case !f._exists: // doesn't exist
		return nil
	case f._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.fotografia ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, f.ID)
	if _, err := db.ExecContext(ctx, sqlstr, f.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	f._deleted = true
	return nil
}

// FotografiumByID retrieves a row from 'public.fotografia' as a [Fotografium].
//
// Generated from index 'fotografia_pk'.
func FotografiumByID(ctx context.Context, db DB, id int64) (*Fotografium, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, planta_id, data, nome, file, ambiente_id ` +
		`FROM public.fotografia ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	f := Fotografium{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&f.ID, &f.PlantaID, &f.Data, &f.Nome, &f.File, &f.AmbienteID); err != nil {
		return nil, logerror(err)
	}
	return &f, nil
}

// FotografiumByFilePlantaIDData retrieves a row from 'public.fotografia' as a [Fotografium].
//
// Generated from index 'fotografia_unique'.
func FotografiumByFilePlantaIDData(ctx context.Context, db DB, file, plantaID int64, data time.Time) (*Fotografium, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, planta_id, data, nome, file, ambiente_id ` +
		`FROM public.fotografia ` +
		`WHERE file = $1 AND planta_id = $2 AND data = $3`
	// run
	logf(sqlstr, file, plantaID, data)
	f := Fotografium{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, file, plantaID, data).Scan(&f.ID, &f.PlantaID, &f.Data, &f.Nome, &f.File, &f.AmbienteID); err != nil {
		return nil, logerror(err)
	}
	return &f, nil
}

// Ambiente returns the Ambiente associated with the [Fotografium]'s (AmbienteID).
//
// Generated from foreign key 'fotografia_ambiente_fk'.
func (f *Fotografium) Ambiente(ctx context.Context, db DB) (*Ambiente, error) {
	return AmbienteByID(ctx, db, f.AmbienteID.Int64)
}

// Plantum returns the Plantum associated with the [Fotografium]'s (PlantaID).
//
// Generated from foreign key 'fotografia_planta_fk'.
func (f *Fotografium) Plantum(ctx context.Context, db DB) (*Plantum, error) {
	return PlantumByID(ctx, db, f.PlantaID)
}
