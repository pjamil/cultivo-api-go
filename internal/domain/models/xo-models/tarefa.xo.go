package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"time"
)

// Tarefa represents a row from 'public.tarefa'.
type Tarefa struct {
	ID         int64          `json:"id"`          // id
	Planta     int64          `json:"planta"`      // planta
	TipoTarefa int64          `json:"tipo_tarefa"` // tipo_tarefa
	Data       time.Time      `json:"data"`        // data
	Descricao  sql.NullString `json:"descricao"`   // descricao
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Tarefa] exists in the database.
func (t *Tarefa) Exists() bool {
	return t._exists
}

// Deleted returns true when the [Tarefa] has been marked for deletion
// from the database.
func (t *Tarefa) Deleted() bool {
	return t._deleted
}

// Insert inserts the [Tarefa] to the database.
func (t *Tarefa) Insert(ctx context.Context, db DB) error {
	switch {
	case t._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case t._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.tarefa (` +
		`planta, tipo_tarefa, data, descricao` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) RETURNING id`
	// run
	logf(sqlstr, t.Planta, t.TipoTarefa, t.Data, t.Descricao)
	if err := db.QueryRowContext(ctx, sqlstr, t.Planta, t.TipoTarefa, t.Data, t.Descricao).Scan(&t.ID); err != nil {
		return logerror(err)
	}
	// set exists
	t._exists = true
	return nil
}

// Update updates a [Tarefa] in the database.
func (t *Tarefa) Update(ctx context.Context, db DB) error {
	switch {
	case !t._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case t._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.tarefa SET ` +
		`planta = $1, tipo_tarefa = $2, data = $3, descricao = $4 ` +
		`WHERE id = $5`
	// run
	logf(sqlstr, t.Planta, t.TipoTarefa, t.Data, t.Descricao, t.ID)
	if _, err := db.ExecContext(ctx, sqlstr, t.Planta, t.TipoTarefa, t.Data, t.Descricao, t.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Tarefa] to the database.
func (t *Tarefa) Save(ctx context.Context, db DB) error {
	if t.Exists() {
		return t.Update(ctx, db)
	}
	return t.Insert(ctx, db)
}

// Upsert performs an upsert for [Tarefa].
func (t *Tarefa) Upsert(ctx context.Context, db DB) error {
	switch {
	case t._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.tarefa (` +
		`id, planta, tipo_tarefa, data, descricao` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`planta = EXCLUDED.planta, tipo_tarefa = EXCLUDED.tipo_tarefa, data = EXCLUDED.data, descricao = EXCLUDED.descricao `
	// run
	logf(sqlstr, t.ID, t.Planta, t.TipoTarefa, t.Data, t.Descricao)
	if _, err := db.ExecContext(ctx, sqlstr, t.ID, t.Planta, t.TipoTarefa, t.Data, t.Descricao); err != nil {
		return logerror(err)
	}
	// set exists
	t._exists = true
	return nil
}

// Delete deletes the [Tarefa] from the database.
func (t *Tarefa) Delete(ctx context.Context, db DB) error {
	switch {
	case !t._exists: // doesn't exist
		return nil
	case t._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.tarefa ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, t.ID)
	if _, err := db.ExecContext(ctx, sqlstr, t.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	t._deleted = true
	return nil
}

// TarefaByID retrieves a row from 'public.tarefa' as a [Tarefa].
//
// Generated from index 'tarefa_pk'.
func TarefaByID(ctx context.Context, db DB, id int64) (*Tarefa, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, planta, tipo_tarefa, data, descricao ` +
		`FROM public.tarefa ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	t := Tarefa{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&t.ID, &t.Planta, &t.TipoTarefa, &t.Data, &t.Descricao); err != nil {
		return nil, logerror(err)
	}
	return &t, nil
}

// Plantum returns the Plantum associated with the [Tarefa]'s (Planta).
//
// Generated from foreign key 'tarefa_planta_fk'.
func (t *Tarefa) Plantum(ctx context.Context, db DB) (*Plantum, error) {
	return PlantumByID(ctx, db, t.Planta)
}

// TipoTarefa returns the TipoTarefa associated with the [Tarefa]'s (TipoTarefa).
//
// Generated from foreign key 'tarefa_tipo_tarefa_fk'.
func (t *Tarefa) TipoTarefas(ctx context.Context, db DB) (*TipoTarefa, error) {
	return TipoTarefaByID(ctx, db, t.TipoTarefa)
}
