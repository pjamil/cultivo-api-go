package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"
)

// PlantaEstagio represents a row from 'public.planta_estagio'.
type PlantaEstagio struct {
	PlantaID  int64     `json:"planta_id"`  // planta_id
	EstagioID int64     `json:"estagio_id"` // estagio_id
	Data      time.Time `json:"data"`       // data
	ID        int64     `json:"id"`         // id
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [PlantaEstagio] exists in the database.
func (pe *PlantaEstagio) Exists() bool {
	return pe._exists
}

// Deleted returns true when the [PlantaEstagio] has been marked for deletion
// from the database.
func (pe *PlantaEstagio) Deleted() bool {
	return pe._deleted
}

// Insert inserts the [PlantaEstagio] to the database.
func (pe *PlantaEstagio) Insert(ctx context.Context, db DB) error {
	switch {
	case pe._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case pe._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.planta_estagio (` +
		`planta_id, estagio_id, data` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) RETURNING id`
	// run
	logf(sqlstr, pe.PlantaID, pe.EstagioID, pe.Data)
	if err := db.QueryRowContext(ctx, sqlstr, pe.PlantaID, pe.EstagioID, pe.Data).Scan(&pe.ID); err != nil {
		return logerror(err)
	}
	// set exists
	pe._exists = true
	return nil
}

// Update updates a [PlantaEstagio] in the database.
func (pe *PlantaEstagio) Update(ctx context.Context, db DB) error {
	switch {
	case !pe._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case pe._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.planta_estagio SET ` +
		`planta_id = $1, estagio_id = $2, data = $3 ` +
		`WHERE id = $4`
	// run
	logf(sqlstr, pe.PlantaID, pe.EstagioID, pe.Data, pe.ID)
	if _, err := db.ExecContext(ctx, sqlstr, pe.PlantaID, pe.EstagioID, pe.Data, pe.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [PlantaEstagio] to the database.
func (pe *PlantaEstagio) Save(ctx context.Context, db DB) error {
	if pe.Exists() {
		return pe.Update(ctx, db)
	}
	return pe.Insert(ctx, db)
}

// Upsert performs an upsert for [PlantaEstagio].
func (pe *PlantaEstagio) Upsert(ctx context.Context, db DB) error {
	switch {
	case pe._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.planta_estagio (` +
		`planta_id, estagio_id, data, id` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`planta_id = EXCLUDED.planta_id, estagio_id = EXCLUDED.estagio_id, data = EXCLUDED.data `
	// run
	logf(sqlstr, pe.PlantaID, pe.EstagioID, pe.Data, pe.ID)
	if _, err := db.ExecContext(ctx, sqlstr, pe.PlantaID, pe.EstagioID, pe.Data, pe.ID); err != nil {
		return logerror(err)
	}
	// set exists
	pe._exists = true
	return nil
}

// Delete deletes the [PlantaEstagio] from the database.
func (pe *PlantaEstagio) Delete(ctx context.Context, db DB) error {
	switch {
	case !pe._exists: // doesn't exist
		return nil
	case pe._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.planta_estagio ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, pe.ID)
	if _, err := db.ExecContext(ctx, sqlstr, pe.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	pe._deleted = true
	return nil
}

// PlantaEstagioByID retrieves a row from 'public.planta_estagio' as a [PlantaEstagio].
//
// Generated from index 'planta_estagio_pk'.
func PlantaEstagioByID(ctx context.Context, db DB, id int64) (*PlantaEstagio, error) {
	// query
	const sqlstr = `SELECT ` +
		`planta_id, estagio_id, data, id ` +
		`FROM public.planta_estagio ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	pe := PlantaEstagio{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&pe.PlantaID, &pe.EstagioID, &pe.Data, &pe.ID); err != nil {
		return nil, logerror(err)
	}
	return &pe, nil
}

// Estagio returns the Estagio associated with the [PlantaEstagio]'s (EstagioID).
//
// Generated from foreign key 'planta_estagio_estagio_fk'.
func (pe *PlantaEstagio) Estagio(ctx context.Context, db DB) (*Estagio, error) {
	return EstagioByID(ctx, db, pe.EstagioID)
}

// Plantum returns the Plantum associated with the [PlantaEstagio]'s (PlantaID).
//
// Generated from foreign key 'planta_estagio_planta_fk'.
func (pe *PlantaEstagio) Plantum(ctx context.Context, db DB) (*Plantum, error) {
	return PlantumByID(ctx, db, pe.PlantaID)
}
