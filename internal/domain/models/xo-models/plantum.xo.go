package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// Plantum represents a row from 'public.planta'.
type Plantum struct {
	ID            int64         `json:"id"`              // id
	Nome          string        `json:"nome"`            // nome
	ComecandoDe   string        `json:"comecando_de"`    // comecando_de
	FotoCapaID    sql.NullInt64 `json:"foto_capa_id"`    // foto_capa_id
	GeneticaID    sql.NullInt64 `json:"genetica_id"`     // genetica_id
	MeioCultivoID sql.NullInt64 `json:"meio_cultivo_id"` // meio_cultivo_id
	AmbienteID    sql.NullInt64 `json:"ambiente_id"`     // ambiente_id
	PlantaMae     sql.NullInt64 `json:"planta_mae"`      // planta_mae
	CriadoEm      sql.NullTime  `json:"criado_em"`       // criado_em
	AlteradoEm    sql.NullTime  `json:"alterado_em"`     // alterado_em
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Plantum] exists in the database.
func (p *Plantum) Exists() bool {
	return p._exists
}

// Deleted returns true when the [Plantum] has been marked for deletion
// from the database.
func (p *Plantum) Deleted() bool {
	return p._deleted
}

// Insert inserts the [Plantum] to the database.
func (p *Plantum) Insert(ctx context.Context, db DB) error {
	switch {
	case p._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case p._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.planta (` +
		`nome, comecando_de, foto_capa_id, genetica_id, meio_cultivo_id, ambiente_id, planta_mae, criado_em, alterado_em` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9` +
		`) RETURNING id`
	// run
	logf(sqlstr, p.Nome, p.ComecandoDe, p.FotoCapaID, p.GeneticaID, p.MeioCultivoID, p.AmbienteID, p.PlantaMae, p.CriadoEm, p.AlteradoEm)
	if err := db.QueryRowContext(ctx, sqlstr, p.Nome, p.ComecandoDe, p.FotoCapaID, p.GeneticaID, p.MeioCultivoID, p.AmbienteID, p.PlantaMae, p.CriadoEm, p.AlteradoEm).Scan(&p.ID); err != nil {
		return logerror(err)
	}
	// set exists
	p._exists = true
	return nil
}

// Update updates a [Plantum] in the database.
func (p *Plantum) Update(ctx context.Context, db DB) error {
	switch {
	case !p._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case p._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.planta SET ` +
		`nome = $1, comecando_de = $2, foto_capa_id = $3, genetica_id = $4, meio_cultivo_id = $5, ambiente_id = $6, planta_mae = $7, criado_em = $8, alterado_em = $9 ` +
		`WHERE id = $10`
	// run
	logf(sqlstr, p.Nome, p.ComecandoDe, p.FotoCapaID, p.GeneticaID, p.MeioCultivoID, p.AmbienteID, p.PlantaMae, p.CriadoEm, p.AlteradoEm, p.ID)
	if _, err := db.ExecContext(ctx, sqlstr, p.Nome, p.ComecandoDe, p.FotoCapaID, p.GeneticaID, p.MeioCultivoID, p.AmbienteID, p.PlantaMae, p.CriadoEm, p.AlteradoEm, p.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Plantum] to the database.
func (p *Plantum) Save(ctx context.Context, db DB) error {
	if p.Exists() {
		return p.Update(ctx, db)
	}
	return p.Insert(ctx, db)
}

// Upsert performs an upsert for [Plantum].
func (p *Plantum) Upsert(ctx context.Context, db DB) error {
	switch {
	case p._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.planta (` +
		`id, nome, comecando_de, foto_capa_id, genetica_id, meio_cultivo_id, ambiente_id, planta_mae, criado_em, alterado_em` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`nome = EXCLUDED.nome, comecando_de = EXCLUDED.comecando_de, foto_capa_id = EXCLUDED.foto_capa_id, genetica_id = EXCLUDED.genetica_id, meio_cultivo_id = EXCLUDED.meio_cultivo_id, ambiente_id = EXCLUDED.ambiente_id, planta_mae = EXCLUDED.planta_mae, criado_em = EXCLUDED.criado_em, alterado_em = EXCLUDED.alterado_em `
	// run
	logf(sqlstr, p.ID, p.Nome, p.ComecandoDe, p.FotoCapaID, p.GeneticaID, p.MeioCultivoID, p.AmbienteID, p.PlantaMae, p.CriadoEm, p.AlteradoEm)
	if _, err := db.ExecContext(ctx, sqlstr, p.ID, p.Nome, p.ComecandoDe, p.FotoCapaID, p.GeneticaID, p.MeioCultivoID, p.AmbienteID, p.PlantaMae, p.CriadoEm, p.AlteradoEm); err != nil {
		return logerror(err)
	}
	// set exists
	p._exists = true
	return nil
}

// Delete deletes the [Plantum] from the database.
func (p *Plantum) Delete(ctx context.Context, db DB) error {
	switch {
	case !p._exists: // doesn't exist
		return nil
	case p._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.planta ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, p.ID)
	if _, err := db.ExecContext(ctx, sqlstr, p.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	p._deleted = true
	return nil
}

// PlantumByID retrieves a row from 'public.planta' as a [Plantum].
//
// Generated from index 'planta_pk'.
func PlantumByID(ctx context.Context, db DB, id int64) (*Plantum, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, nome, comecando_de, foto_capa_id, genetica_id, meio_cultivo_id, ambiente_id, planta_mae, criado_em, alterado_em ` +
		`FROM public.planta ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	p := Plantum{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&p.ID, &p.Nome, &p.ComecandoDe, &p.FotoCapaID, &p.GeneticaID, &p.MeioCultivoID, &p.AmbienteID, &p.PlantaMae, &p.CriadoEm, &p.AlteradoEm); err != nil {
		return nil, logerror(err)
	}
	return &p, nil
}

// PlantumByNome retrieves a row from 'public.planta' as a [Plantum].
//
// Generated from index 'planta_unique'.
func PlantumByNome(ctx context.Context, db DB, nome string) (*Plantum, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, nome, comecando_de, foto_capa_id, genetica_id, meio_cultivo_id, ambiente_id, planta_mae, criado_em, alterado_em ` +
		`FROM public.planta ` +
		`WHERE nome = $1`
	// run
	logf(sqlstr, nome)
	p := Plantum{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, nome).Scan(&p.ID, &p.Nome, &p.ComecandoDe, &p.FotoCapaID, &p.GeneticaID, &p.MeioCultivoID, &p.AmbienteID, &p.PlantaMae, &p.CriadoEm, &p.AlteradoEm); err != nil {
		return nil, logerror(err)
	}
	return &p, nil
}

// Ambiente returns the Ambiente associated with the [Plantum]'s (AmbienteID).
//
// Generated from foreign key 'planta_ambiente_fk'.
func (p *Plantum) Ambiente(ctx context.Context, db DB) (*Ambiente, error) {
	return AmbienteByID(ctx, db, p.AmbienteID.Int64)
}

// Genetica returns the Genetica associated with the [Plantum]'s (GeneticaID).
//
// Generated from foreign key 'planta_genetica_fk'.
func (p *Plantum) Genetica(ctx context.Context, db DB) (*Genetica, error) {
	return GeneticaByID(ctx, db, p.GeneticaID.Int64)
}

// MeioCultivo returns the MeioCultivo associated with the [Plantum]'s (MeioCultivoID).
//
// Generated from foreign key 'planta_meio_cultivo_fk'.
func (p *Plantum) MeioCultivo(ctx context.Context, db DB) (*MeioCultivo, error) {
	return MeioCultivoByID(ctx, db, p.MeioCultivoID.Int64)
}
