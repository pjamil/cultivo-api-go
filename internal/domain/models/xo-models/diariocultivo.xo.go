package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"time"
)

// DiarioCultivo represents a row from 'public.diario_cultivo'.
type DiarioCultivo struct {
	ID               int64         `json:"id"`                // id
	DataRegistro     time.Time     `json:"data_registro"`     // data_registro
	Tarefa           sql.NullInt64 `json:"tarefa"`            // tarefa
	Fotografia       sql.NullInt64 `json:"fotografia"`        // fotografia
	RegistroPlanta   sql.NullInt64 `json:"registro_planta"`   // registro_planta
	RegistroAmbiente sql.NullInt64 `json:"registro_ambiente"` // registro_ambiente
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [DiarioCultivo] exists in the database.
func (dc *DiarioCultivo) Exists() bool {
	return dc._exists
}

// Deleted returns true when the [DiarioCultivo] has been marked for deletion
// from the database.
func (dc *DiarioCultivo) Deleted() bool {
	return dc._deleted
}

// Insert inserts the [DiarioCultivo] to the database.
func (dc *DiarioCultivo) Insert(ctx context.Context, db DB) error {
	switch {
	case dc._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case dc._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.diario_cultivo (` +
		`data_registro, tarefa, fotografia, registro_planta, registro_ambiente` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) RETURNING id`
	// run
	logf(sqlstr, dc.DataRegistro, dc.Tarefa, dc.Fotografia, dc.RegistroPlanta, dc.RegistroAmbiente)
	if err := db.QueryRowContext(ctx, sqlstr, dc.DataRegistro, dc.Tarefa, dc.Fotografia, dc.RegistroPlanta, dc.RegistroAmbiente).Scan(&dc.ID); err != nil {
		return logerror(err)
	}
	// set exists
	dc._exists = true
	return nil
}

// Update updates a [DiarioCultivo] in the database.
func (dc *DiarioCultivo) Update(ctx context.Context, db DB) error {
	switch {
	case !dc._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case dc._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.diario_cultivo SET ` +
		`data_registro = $1, tarefa = $2, fotografia = $3, registro_planta = $4, registro_ambiente = $5 ` +
		`WHERE id = $6`
	// run
	logf(sqlstr, dc.DataRegistro, dc.Tarefa, dc.Fotografia, dc.RegistroPlanta, dc.RegistroAmbiente, dc.ID)
	if _, err := db.ExecContext(ctx, sqlstr, dc.DataRegistro, dc.Tarefa, dc.Fotografia, dc.RegistroPlanta, dc.RegistroAmbiente, dc.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [DiarioCultivo] to the database.
func (dc *DiarioCultivo) Save(ctx context.Context, db DB) error {
	if dc.Exists() {
		return dc.Update(ctx, db)
	}
	return dc.Insert(ctx, db)
}

// Upsert performs an upsert for [DiarioCultivo].
func (dc *DiarioCultivo) Upsert(ctx context.Context, db DB) error {
	switch {
	case dc._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.diario_cultivo (` +
		`id, data_registro, tarefa, fotografia, registro_planta, registro_ambiente` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`data_registro = EXCLUDED.data_registro, tarefa = EXCLUDED.tarefa, fotografia = EXCLUDED.fotografia, registro_planta = EXCLUDED.registro_planta, registro_ambiente = EXCLUDED.registro_ambiente `
	// run
	logf(sqlstr, dc.ID, dc.DataRegistro, dc.Tarefa, dc.Fotografia, dc.RegistroPlanta, dc.RegistroAmbiente)
	if _, err := db.ExecContext(ctx, sqlstr, dc.ID, dc.DataRegistro, dc.Tarefa, dc.Fotografia, dc.RegistroPlanta, dc.RegistroAmbiente); err != nil {
		return logerror(err)
	}
	// set exists
	dc._exists = true
	return nil
}

// Delete deletes the [DiarioCultivo] from the database.
func (dc *DiarioCultivo) Delete(ctx context.Context, db DB) error {
	switch {
	case !dc._exists: // doesn't exist
		return nil
	case dc._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.diario_cultivo ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, dc.ID)
	if _, err := db.ExecContext(ctx, sqlstr, dc.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	dc._deleted = true
	return nil
}

// DiarioCultivoByID retrieves a row from 'public.diario_cultivo' as a [DiarioCultivo].
//
// Generated from index 'diario_cultivo_pk'.
func DiarioCultivoByID(ctx context.Context, db DB, id int64) (*DiarioCultivo, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, data_registro, tarefa, fotografia, registro_planta, registro_ambiente ` +
		`FROM public.diario_cultivo ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	dc := DiarioCultivo{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&dc.ID, &dc.DataRegistro, &dc.Fotografia, &dc.RegistroPlanta, &dc.RegistroAmbiente); err != nil {
		return nil, logerror(err)
	}
	return &dc, nil
}

// Fotografium returns the Fotografium associated with the [DiarioCultivo]'s (Fotografia).
//
// Generated from foreign key 'diario_cultivo_fotografia_fk'.
func (dc *DiarioCultivo) Fotografium(ctx context.Context, db DB) (*Fotografium, error) {
	return FotografiumByID(ctx, db, dc.Fotografia.Int64)
}

// RegistroAmbiente returns the RegistroAmbiente associated with the [DiarioCultivo]'s (RegistroAmbiente).
//
// Generated from foreign key 'diario_cultivo_registro_ambiente_fk'.
func (dc *DiarioCultivo) RegistrarAmbiente(ctx context.Context, db DB) (*RegistroAmbiente, error) {
	return RegistroAmbienteByID(ctx, db, dc.RegistroAmbiente.Int64)
}

// RegistroPlantum returns the RegistroPlantum associated with the [DiarioCultivo]'s (RegistroPlanta).
//
// Generated from foreign key 'diario_cultivo_registro_planta_fk'.
func (dc *DiarioCultivo) RegistroPlantum(ctx context.Context, db DB) (*RegistroPlantum, error) {
	return RegistroPlantumByID(ctx, db, dc.RegistroPlanta.Int64)
}

// Tarefa returns the Tarefa associated with the [DiarioCultivo]'s (Tarefa).
//
// Generated from foreign key 'diario_cultivo_tarefa_fk'.
func (dc *DiarioCultivo) Tarefas(ctx context.Context, db DB) (*Tarefa, error) {
	return TarefaByID(ctx, db, dc.Tarefa.Int64)
}
