// Package models contains generated code for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// Representa os ambientes de cultivo
type Ambiente struct {
	ID             int64          `json:"id"`              // identificador unico sequencial
	Nome           string         `json:"nome"`            // Nome que identifica o ambiente
	TipoAmbiente   string         `json:"tipo_ambiente"`   // Tipo do ambiente
	Comprimento    sql.NullString `json:"comprimento"`     // O comprimento do ambiente em cm
	Largura        sql.NullString `json:"largura"`         // A largura do ambiente em cm
	Altura         sql.NullString `json:"altura"`          // A altura do ambiente em cm
	TempoExposicao sql.NullString `json:"tempo_exposicao"` // O tempo que o ambiente tem de exposição a luz
	FotografiaID   sql.NullInt64  `json:"fotografia_id"`   // Identificador da fotografia
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Ambiente] exists in the database.
func (a *Ambiente) Exists() bool {
	return a._exists
}

// Deleted returns true when the [Ambiente] has been marked for deletion
// from the database.
func (a *Ambiente) Deleted() bool {
	return a._deleted
}

// Insert inserts the [Ambiente] to the database.
func (a *Ambiente) Insert(ctx context.Context, db DB) error {
	switch {
	case a._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case a._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.ambiente (` +
		`nome, tipo_ambiente, comprimento, largura, altura, tempo_exposicao, fotografia_id` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`) RETURNING id`
	// run
	logf(sqlstr, a.Nome, a.TipoAmbiente, a.Comprimento, a.Largura, a.Altura, a.TempoExposicao, a.FotografiaID)
	if err := db.QueryRowContext(ctx, sqlstr, a.Nome, a.TipoAmbiente, a.Comprimento, a.Largura, a.Altura, a.TempoExposicao, a.FotografiaID).Scan(&a.ID); err != nil {
		return logerror(err)
	}
	// set exists
	a._exists = true
	return nil
}

// Update updates a [Ambiente] in the database.
func (a *Ambiente) Update(ctx context.Context, db DB) error {
	switch {
	case !a._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case a._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.ambiente SET ` +
		`nome = $1, tipo_ambiente = $2, comprimento = $3, largura = $4, altura = $5, tempo_exposicao = $6, fotografia_id = $7 ` +
		`WHERE id = $8`
	// run
	logf(sqlstr, a.Nome, a.TipoAmbiente, a.Comprimento, a.Largura, a.Altura, a.TempoExposicao, a.FotografiaID, a.ID)
	if _, err := db.ExecContext(ctx, sqlstr, a.Nome, a.TipoAmbiente, a.Comprimento, a.Largura, a.Altura, a.TempoExposicao, a.FotografiaID, a.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Ambiente] to the database.
func (a *Ambiente) Save(ctx context.Context, db DB) error {
	if a.Exists() {
		return a.Update(ctx, db)
	}
	return a.Insert(ctx, db)
}

// Upsert performs an upsert for [Ambiente].
func (a *Ambiente) Upsert(ctx context.Context, db DB) error {
	switch {
	case a._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.ambiente (` +
		`id, nome, tipo_ambiente, comprimento, largura, altura, tempo_exposicao, fotografia_id` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`nome = EXCLUDED.nome, tipo_ambiente = EXCLUDED.tipo_ambiente, comprimento = EXCLUDED.comprimento, largura = EXCLUDED.largura, altura = EXCLUDED.altura, tempo_exposicao = EXCLUDED.tempo_exposicao, fotografia_id = EXCLUDED.fotografia_id `
	// run
	logf(sqlstr, a.ID, a.Nome, a.TipoAmbiente, a.Comprimento, a.Largura, a.Altura, a.TempoExposicao, a.FotografiaID)
	if _, err := db.ExecContext(ctx, sqlstr, a.ID, a.Nome, a.TipoAmbiente, a.Comprimento, a.Largura, a.Altura, a.TempoExposicao, a.FotografiaID); err != nil {
		return logerror(err)
	}
	// set exists
	a._exists = true
	return nil
}

// Delete deletes the [Ambiente] from the database.
func (a *Ambiente) Delete(ctx context.Context, db DB) error {
	switch {
	case !a._exists: // doesn't exist
		return nil
	case a._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.ambiente ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, a.ID)
	if _, err := db.ExecContext(ctx, sqlstr, a.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	a._deleted = true
	return nil
}

// AmbienteByID retrieves a row from 'public.ambiente' as a [Ambiente].
//
// Generated from index 'ambiente_pk'.
func AmbienteByID(ctx context.Context, db DB, id int64) (*Ambiente, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, nome, tipo_ambiente, comprimento, largura, altura, tempo_exposicao, fotografia_id ` +
		`FROM public.ambiente ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	a := Ambiente{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&a.ID, &a.Nome, &a.TipoAmbiente, &a.Comprimento, &a.Largura, &a.Altura, &a.TempoExposicao, &a.FotografiaID); err != nil {
		return nil, logerror(err)
	}
	return &a, nil
}

// AmbienteByNome retrieves a row from 'public.ambiente' as a [Ambiente].
//
// Generated from index 'ambiente_unique'.
func AmbienteByNome(ctx context.Context, db DB, nome string) (*Ambiente, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, nome, tipo_ambiente, comprimento, largura, altura, tempo_exposicao, fotografia_id ` +
		`FROM public.ambiente ` +
		`WHERE nome = $1`
	// run
	logf(sqlstr, nome)
	a := Ambiente{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, nome).Scan(&a.ID, &a.Nome, &a.TipoAmbiente, &a.Comprimento, &a.Largura, &a.Altura, &a.TempoExposicao, &a.FotografiaID); err != nil {
		return nil, logerror(err)
	}
	return &a, nil
}
